{% extends "base.html.twig" %}

{% block title %}Magic number{% endblock %}

{% block main %}
    <h1>Redovisnings-sida</h1>
    <h2 id="1">Kmom01</h2>
    <p>Jag har arbetat objektorienterat i Python samt C++ så jag skulle säga att jag har goda kunskaper om hur det fungerar.</p>
    <p>Objekt i PHP har som andra objekt attribut och funktioner. För att skapa ett objekt behöver du skapa en klass för objektet och i denna definerar du attributen och funktionerna som objektet ska ha. Efter den är skapad kan du skapa ett objekt med new följt av klassen. Sedan kan du komma åt klassens attribut och funktioner.</p>
    <p>Det är mycket mappar och filer som man behöver ha koll på för att skapa report sidan. Nu känns det dock som jag har en bra översikt på vilka filer som man behöver hålla koll på.</p>
    <p>Jag tycker att det var intressant om hur de skrev om att man ska dela upp filerna i vyer precis som vi har gjort för att separera det logiska som sker från det som visas upp.</p>
    <p>Den här veckan har jag lärt mig hur man skapar en symfony hemsida samt hur man kan arbeta med JSON tilsammans med PHP.</p>
    <h2 id="2">Kmom02</h2>
    <p>Arv är den relationen som innebär att alla klasser som ärver från klassen har tillgång till samma attribut och funktioner som basklassen. Syftet med det är att bygga vidare på funktionallitet som skiljer olika klasser åt.</p>
    <p>Komposition är en ägande relation där den ena klassen äger en instans av den andra. Även här får man tillgång till den klassens funktioner.</p>
    <p>Interfaces innebär att man skapar metoder som klassen måste implementer för att skapa en struktur för klasserna, hur den implementeras är dock fritt.</p>
    <p>Traits finns för att man ska kunna återanvända sin kod. Det är ett kodstycke som man kan inkludera i en klass. Man använder det ofta för att lägga till funktionallitet som delas mellan flera klasser för att inte behöva skriva samma kod igen.</p>
    <p>Det här var ett köttigt kursmoment. Jag började med att implementera Card klassen, därefter skapade jag CardGraphic och CardDeckHand klassen. Jag gjorde så att min kortlek skapas som en tom kortlek till och börja med. Om man vill skapa en hel kortlek skapar man den med funktionen SetupDeck. Efter detta skapas korten och läggs i ordning som när man öppnar en ny kortlek. Därefter skapade jag en funktion där man kan skapa en kortlek utan de som tagits bort</p>
    <p>De förbättringar som jag ser är att skapa en funktion där man kan lägga till kort en och en samt att skicka med de korten som är kvar i kortleken istället för att de ska hamna i samma ordning efter man dragit ett kort.</p>
    <p>Eftersom jag har arbetat ganska mycket objektorienterat sedan tidigare tror jag det hade gått bra utan det med, men det kan underlätta när man skapar större klasser.</p>
    <p>Jag har lärt mig hur man skriver objektorienterat i PHP</p>
    <h2 id="3">Kmom03</h2>
    <p>Det var ett tag sedan jag arbetade med flödesdiagram. Men efter att ha skapat dessa listade jag ganska snabbt ut att jag skulle arbeta med post formulär. Det skapade också en tydlig överblick som förenklade att ta itag med mindre problem. Tack vare att jag hade skapat dessa tror jag att det blev lättare att komma igång och att se delproblemen som behövdes lösas. Däremot var det en klass som jag inte hade räknat med i mitt flödesdiagram samt psudokod.</p>
    <p>Jag löste uppgiften genom att implementera tre nya klasser. De klasserna var en för spelaren, en för banken samt en klass för en ny korthand. Det som dessa klassernas huvuduppgifter var.
    <h4>Korthanden</h4>
    <p>Det denna klass huvuduppgift var att summera handens poäng. Eftersom att korten i blackjack räknas som andra poäng skötte klassen en omformatering av kortens poäng.</p>
    <h4>Player och Bank</h4>
    <p>Dessa klasserna hade samma uppgift och det var att räkna ut om de får dra fler kort enligt reglerna i blackjack. Eftersom att reglerna är olika för banken och spelaren skapades två olika klasser för att hantera denna kontroll.</p>
    <h2 id="4">Kmom04</h2>
    <h2 id="5">Kmom05</h2>
    <h2 id="6">Kmom06</h2>
    <h2 id="7">Kmom07</h2>

{% endblock %}