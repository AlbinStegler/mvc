{% extends "base.html.twig" %}

{% block title %}Redovisa{% endblock %}

{% block main %}
    <h1>Redovisnings-sida</h1>
    <h2 id="1">Kmom01</h2>
    <p>Jag har arbetat objektorienterat i Python samt C++ så jag skulle säga att jag har goda kunskaper om hur det fungerar.</p>
    <p>Objekt i PHP har som andra objekt attribut och funktioner. För att skapa ett objekt behöver du skapa en klass för objektet och i denna definerar du attributen och funktionerna som objektet ska ha. Efter den är skapad kan du skapa ett objekt med new följt av klassen. Sedan kan du komma åt klassens attribut och funktioner.</p>
    <p>Det är mycket mappar och filer som man behöver ha koll på för att skapa report sidan. Nu känns det dock som jag har en bra översikt på vilka filer som man behöver hålla koll på.</p>
    <p>Jag tycker att det var intressant om hur de skrev om att man ska dela upp filerna i vyer precis som vi har gjort för att separera det logiska som sker från det som visas upp.</p>
    <p>Den här veckan har jag lärt mig hur man skapar en symfony hemsida samt hur man kan arbeta med JSON tilsammans med PHP.</p>
    <h2 id="2">Kmom02</h2>
    <p>Arv är den relationen som innebär att alla klasser som ärver från klassen har tillgång till samma attribut och funktioner som basklassen. Syftet med det är att bygga vidare på funktionallitet som skiljer olika klasser åt.</p>
    <p>Komposition är en ägande relation där den ena klassen äger en instans av den andra. Även här får man tillgång till den klassens funktioner.</p>
    <p>Interfaces innebär att man skapar metoder som klassen måste implementer för att skapa en struktur för klasserna, hur den implementeras är dock fritt.</p>
    <p>Traits finns för att man ska kunna återanvända sin kod. Det är ett kodstycke som man kan inkludera i en klass. Man använder det ofta för att lägga till funktionallitet som delas mellan flera klasser för att inte behöva skriva samma kod igen.</p>
    <p>Det här var ett köttigt kursmoment. Jag började med att implementera Card klassen, därefter skapade jag CardGraphic och CardDeckHand klassen. Jag gjorde så att min kortlek skapas som en tom kortlek till och börja med. Om man vill skapa en hel kortlek skapar man den med funktionen SetupDeck. Efter detta skapas korten och läggs i ordning som när man öppnar en ny kortlek. Därefter skapade jag en funktion där man kan skapa en kortlek utan de som tagits bort</p>
    <p>De förbättringar som jag ser är att skapa en funktion där man kan lägga till kort en och en samt att skicka med de korten som är kvar i kortleken istället för att de ska hamna i samma ordning efter man dragit ett kort.</p>
    <p>Eftersom jag har arbetat ganska mycket objektorienterat sedan tidigare tror jag det hade gått bra utan det med, men det kan underlätta när man skapar större klasser.</p>
    <p>Jag har lärt mig hur man skriver objektorienterat i PHP</p>
    <h2 id="3">Kmom03</h2>
    <p>Det var ett tag sedan jag arbetade med flödesdiagram. Men efter att ha skapat dessa listade jag ganska snabbt ut att jag skulle arbeta med post formulär. Det skapade också en tydlig överblick som förenklade att ta itag med mindre problem. Tack vare att jag hade skapat dessa tror jag att det blev lättare att komma igång och att se delproblemen som behövdes lösas. Däremot var det en klass som jag inte hade räknat med i mitt flödesdiagram samt psudokod.</p>
    <p>Jag löste uppgiften genom att implementera tre nya klasser. De klasserna var en för spelaren, en för banken samt en klass för en ny korthand. Det som dessa klassernas huvuduppgifter var.
    <h4>Korthanden</h4>
    <p>Det denna klass huvuduppgift var att summera handens poäng. Eftersom att korten i blackjack räknas som andra poäng gör klassen en omformatering av kortens poäng.</p>
    <h4>Player och Bank</h4>
    <p>Dessa klasserna hade samma uppgift och det var att räkna ut om de får dra fler kort enligt reglerna i blackjack. Eftersom att reglerna är olika för banken och spelaren skapades två olika klasser för att hantera denna kontroll.</p>
    <p>Hanteringen av session flyttade jag ut i en klass som jag kallar för helper, den klassen använder jag för att minska koden som finns i mina controllers. Eftersom att hämtande samt sparande i session sker i flera kontroller kändes detta som en bra lösning.</p>
    <p>Jag är nöjd med min lösning som helhet om det är något som jag skulle förbättra är det att skicka in hela kortleken i session för att skapa den så att alla kort ligger i den ordning som de gjorde innan. När jag tog beslutet att skicka in de dragna korten ansåg jag att det var bättre då sessionen inte behövde hålla lika mycket data. Men i efterhand inser jag att det inte är så stor skillnad eftersom att när jag dragit 51 kort måste sessionen fortfarande hålla i 51 kort.</p>
    <p>Nu känner jag att jag börjar få koll på hur man arbetar i symfony. Jag skulle säga att det påminner om hur man arbetade i flask i den tidigare python kursen.</p>
    <p>Jag har testat på hur det är att arbeta med friare tyglar och hur man kan arbeta klassorienterat med mindre guidning än tidigare.</p>
    <h2 id="4">Kmom04</h2>
    <p>Jag tycker att det kändes bra att kunna testa delar av min kod. Det var ett bra UI som visar tydligt vad det är som man har missat att testa. Rent generellt tycker jag att det är viktigt att enhetstesta. Det tycker jag kan vara bra att göra samtidigt som man utvecklar en klass för att kolla att den fungerar som man förväntar sig.</p>
    <p>Jag lyckades nå en kodtäckning på 100% på de klasserna som jag använder för mitt spel. Koden var relativt testbar, jag var dock tvungen att lägga till några metoder för att underlätta testningen.</p>
    <p>För att testa koden ändrade jag lite på koden samt la jag till nya metoder. Jag la till en klass för att returnera handen eftersom att variabeln är skyddad. Sedan la jag även till en metod för att lägga ihop kort med de befintliga då linterna klagade på att array_merge inte med en array med mitt egna objekt. För att förenkla skapade jag en funktion för att skapa mina kort på en rad istället för tre. Egentligen bör man kanske skapa om konstruktorn på dessa klasserna för att få färre rader kod. Utöver dett klarade jag mig ganska bra med den koden som jag hade skrivit.</p>
    <p>Enligt mig är testbar kod, kod som är enkel att testa och inte kräver speciellt många rader för att testa funktionerna. Funktionerna bör även göra en sak per funktion.</p>
    <p>Jag har lärt mig hur man skapar dokumentation med phpdoc samt hur man jobbar med phpunit för att testa enskilda delar av en hemsida</p>
    <h2 id="5">Kmom05</h2>
    <p>Det gick bra att arbeta igenom övningen och jag tycker att det var ett användarvänligt sätt att arbeta med doctrine. Det som är det viktigaste är att man ska veta vilka moduler man ska använda för att komma åt de funktionerna som man behöver.</p>
    <p>Jag försökte att bygga upp applikationen på samma sätt som vi jobbade i databaskursen. Från startsidan kan man lägga till en ny bok och sedan kan man använda knapparna på de olika böckerna för att redigera ta bort eller endast visa den boken.</p>
    <p>Det gick bra att arbeta med ORM jag kan tänka mig att det är ett bra sätt för de som inte vet hur man arbetar med databaser. Eftersom att man inte behöver någon kunskap hur man arbetar mot databaser för det är inkapslat i en klass där man kan använda dess funktioner istället.</p>
    <p>ORM påminner något om hur vi jobbade mot SQL med JavaScript fast skillnaden här är att man slipper skriva SQL queries för att de finns i klasserna.</p>
    <p>Jag har lärt mig hur man skapar en databas med ORM med Symfony för att skapa och modifiera databasen.</p>
    <h2 id="6">Kmom06</h2>
    <p>Jag tycker att gränssnittet är snyggt och enkelt att använda. Det finns tydliga grafer samt bilder som visar kopplingar mellan klasser och det är enkelt att använda. Jag tycker att det bästa var funktionen med att se kopplingar mellan klasser.</p>
    <p>Att integrera Scrutinizer var lite krångligt för mig då min sass modul inte var korrekt installerad vilket resulterade i en build som "faila". Verktyget är bra att ha då testerna sker automatiskt vid push och det är inget man måste tänka på för att hålla det uppdaterat. Jag föredrog php metrics UI då man tydligt kunde se vad som var fel, men jag gillade badgesen i Scrutinizer. Jag fick 27% coverage i starten av bygget då jag inte har tester på controller klasserna och där har jag majoriteten av min kod.</p>
    <p>Kodkvalite enligt mig är en läsbar kod. Vissa saker med testerna kan skapa en renare kod, men ett exempel där jag tycker att det blev sämre var när jag tog bort min helper klass. Den skapade jag för att undvika duplicering av kod och för att flytta ut större delar till en egen "modul", men detta ville inte phpmetrics att man skulle göra. Scrutinizer kan dock ge en ganska snabb överblick om hur bra ett projekt är med sina badges. Dock kan coverage vara lite missvisande och man kan exkludera filer för att "fuska" till sig ett bättre betyg.</p>
    <h2 id="7">Kmom07</h2>

{% endblock %}